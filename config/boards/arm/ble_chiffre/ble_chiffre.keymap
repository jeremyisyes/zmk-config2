/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define USEFUL 1
#define NAV 2

/ {
	behaviors {
		rst: boot_reset 
		{
			compatible = "zmk,behavior-hold-tap";
			label = "Bootloader Tap - Reset Hold";
			#binding-cells = <2>;
			tapping_term_ms = <200>;
            flavor = "balanced";
			bindings = <&reset>, <&bootloader>;
        };

        bh: layer_taps 
		{
			compatible = "zmk,behavior-hold-tap";
			label = "Layer-Tap";
			#binding-cells = <2>;
			tapping_term_ms = <300>;
            flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
	    };
   	 };
};

/ {
	combos {
		compatible = "zmk,combos";
		combo_backspce {
			timeout-ms = <50>;
			key-positions = <9 10>;
			bindings = <&kp BSPC>;
		};
		combo_gesc 
		{
			timeout-ms = <30>;
			key-positions = <0 1>;
			bindings = <&kp ESC>;
		};
		combo_tab 
		{
			timeout-ms = <35>;
			key-positions = <11 12>;
			bindings = <&kp TAB>;
		};
	};
};

/ {
    keymap 
	{
    compatible = "zmk,keymap";

    default_layer {
    //   |    Q    |    W    |    E    |    R    |    T    |    Y    |    U    |    I    |    O    |    P    |
    //   |    A    |    S    |    D    |    F    |    G    |    H    |    J    |    K    |    L    |    '    |
    //   | Shft/Z  |    X    |    C    |    V    |  fn2/B  |    B    |    N    |    M    |    ,    | Shft/.  |
    //                                  |  Ctrl | ENTR+fn1 | Space |  Alt  |   
	   bindings = <
    &kp Q 	&kp W 	&kp E 	&kp R 	&kp T 	&kp Y 	&kp U 	&kp I 	&kp O 	  &kp P
    &kp A 	&kp S 	&kp D 	&kp F 	&kp G 	&kp H 	&kp J 	&kp K 	&kp L 	  &kp SQT
    &bh LSHFT Z &kp X 	&kp C 	&kp V 	&bh 2 B &kp B 	&kp N 	&kp M 	&kp COMMA &bh RSHFT DOT
    			    &kp LCTRL &bh 1 RET &kp SPACE &kp RALT
            >;
        };

    useful {
    //   |    1    |    2    |    3    |    4    |    5    |    6    |    7    |    8    |    9    |    0    |
    //   |  Left   |  Down   |   Up    |  Right  |  Pg_up  |    x    |    -    |    =    |    x    |    ;    |
    //   |    x    |    x    |  Home   |   End   |  Pg_dn  |    x    |    [    |    ]    |    \    | Shft//  |
    //                                 |    x    |    x    |    x    |    x    |
            bindings = <
    &kp N1 	&kp N2 	  &kp N3   &kp N4      &kp N5 	  &kp N6    &kp N7 	&kp N8 	    &kp N9 	&kp N0
    &kp LEFT    &kp DOWN  &kp UP   &kp RIGHT   &kp PG_UP  &trans    &kp MINUS 	&kp EQUAL   &trans      &kp SEMI
    &trans	&trans 	  &kp HOME &kp END     &kp PG_DN  &trans    &kp LBKT 	&kp RBKT    &kp BSLH    &bh RSHFT FSLH
    			           &trans      &trans     &trans    &trans
            >;
        };

    nav {
    //   |   F1    |   F2    |   F3    |   F4    |    x    |  BT_up  |    x    | Vol_up  |    x    |   DEL   |
    //   |   F5    |   F6    |   F7    |   F8    |    x    |  BT_dn  |    x    |   Mute  |    x    |    x    |
    //   |   F9    |   F10   |   F11   |   F12   |    x    | BT_clr  |    x    | Vol_dn  |    x    |   Caps  |
    //                                 |    x    |    x    |    x    |    x    |
            bindings = <
    &kp F1 	&kp F2 	&kp F3 	&kp F4 	&trans 	&bt BT_NXT   &trans 	&kp C_VOL_UP 	&trans 	  &kp DEL
    &kp F5 	&kp F6 	&kp F7 	&kp F8 	&trans 	&bt BT_PRV   &trans 	&kp C_MUTE 	&trans 	  &trans
    &kp F9      &kp F10 &kp F11 &kp F12 &trans  &bt BT_CLR   &trans 	&kp C_VOL_DN 	&trans    &kp CAPS
    		         &trans      &trans     &trans    &trans
            >;
        };
    };
};
